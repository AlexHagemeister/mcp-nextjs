generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model mcp_users {
  email  String @id(map: "mcp_users_pk") @db.VarChar
  config Json?  @db.Json
}

model users {
  email            String  @unique(map: "users_email_idx") @db.VarChar
  twitter_token    String? @db.VarChar
  linkedin_token   String? @db.VarChar
  bluesky_token    String? @db.VarChar
  mastodon_token   String? @db.VarChar
  linkedin_company String? @db.VarChar
  utm_rules        Json?   @db.Json
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  clients       OAuthClient[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OAuthClient {
  id           String   @id @default(cuid())
  clientId     String   @unique
  clientSecret String
  name         String
  description  String?
  redirectUris String[]
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tokens       OAuthToken[]
}

model OAuthToken {
  id            String      @id @default(cuid())
  accessToken   String      @unique
  refreshToken  String?     @unique
  clientId      String
  client        OAuthClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  expiresAt     DateTime
  scope         String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
